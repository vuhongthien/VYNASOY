 @RequestMapping(value = {"/fileList/{id}"}, method = RequestMethod.GET)
    protected void doGet(HttpServletRequest req, HttpServletResponse resp, @PathVariable(required = false) Long id) throws ServletException, IOException {
        inputStream = null;
        outputStream = null;

        attachment = new Attachment();
        attachment = attachmentService.getById(id);
        String mineType = attachment.getTypeOfFile();

        try {
//            String dir = "F://USER";
//            if (BeanName.KEDB.equalsIgnoreCase(type)) {
//                dir = FileUtils.KEDB_ATTACHMENT_DIRECTORY + File.separator + id;
//            } else /* if (BeanName.TICKET.equalsIgnoreCase(type)) */ {
//                dir = FileUtils.SMS_ATTACHMENTS + File.separator + attachment.getAttachObjectType() + File.separator
//                        + attachment.getAttachObjectId() + File.separator + id;
//            }
            String attachmentPath = attachment.getFilePathServer();
            inputStream = Files.newInputStream(Paths.get(attachmentPath));
            // IOUtils jar used to convert Input Stream to byte array easily

            ByteArrayOutputStream os = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];

            int len;

            // read bytes from the input stream and store them in the buffer
            while ((len = inputStream.read(buffer)) != -1) {
                // write bytes from the buffer into the output stream
                os.write(buffer, 0, len);
            }
            byte[] bytes = os.toByteArray();

            MimetypesFileTypeMap mimetypesFileTypeMap = new MimetypesFileTypeMap();
            String _MimetypesFileTypeMap = "";
            switch (mineType) {
                case ".pdf":
                    _MimetypesFileTypeMap = "application/pdf";
                    break;
                case ".jpg":
                    _MimetypesFileTypeMap = "image/jpg";
                    break;
                case ".txt":
                    _MimetypesFileTypeMap = "text/plain";
                    break;
                default:
                    _MimetypesFileTypeMap = "application/octet-stream";
                    break;
            }

            if (new File(attachmentPath).exists()) {
                resp.setContentType(_MimetypesFileTypeMap + "; charset=UTF-8");
                resp.setCharacterEncoding("UTF-8");
                resp.setHeader("X-Frame-Options", "SAMEORIGIN");
                if (req.getHeader("User-Agent").indexOf("IE") != -1 || req.getHeader("User-Agent").indexOf("Chrome") != -1) {
                    resp.setHeader("Content-disposition", " inline; filename=" + URLEncoder.encode(attachment.getFileName(), StandardCharsets.UTF_8.toString()).replace("+", "%20"));
                } else {
                    resp.setHeader("Content-disposition", " inline; filename*=UTF-8''" + URLEncoder.encode(attachment.getFileName(), StandardCharsets.UTF_8.toString()).replace("+", "%20"));
                }

                outputStream = resp.getOutputStream();
                outputStream.write(bytes);
//                resp.getOutputStream().write(Files.readAllBytes(Paths.get(attachment.getFileName())));
            } else
                resp.sendError(404, "File not found");
        } catch (Exception e) {
            resp.sendError(404, e.toString());
        } finally {
            if (inputStream != null)
                inputStream.close();
            if (outputStream != null)
                outputStream.close();
        }
    }